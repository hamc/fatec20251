name: 🚀 CI/CD Pipeline - Microserviço Estoque.io

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'servico-estoque/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'servico-estoque/**'
  workflow_dispatch:  # Permite execução manual

env:
  NODE_VERSION: '18'
  SERVICE_PORT: 3000
  WORKING_DIR: 'servico-estoque'

jobs:
  # Job de validação inicial
  validate:
    name: 🔍 Validação Inicial
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: 🔍 Verificar mudanças relevantes
      id: changes
      run: |
        if git diff --name-only HEAD~1 HEAD | grep -E '^servico-estoque/(server\.js|package\.json|data/)'; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "✅ Mudanças críticas detectadas - pipeline completo será executado"
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "ℹ️ Apenas mudanças menores detectadas"
        fi
        
    - name: 📋 Listar arquivos modificados
      run: |
        echo "📄 Arquivos modificados neste commit:"
        git diff --name-only HEAD~1 HEAD | grep '^servico-estoque/' || echo "Nenhum arquivo do serviço modificado"

  # Job de build otimizado
  build:
    name: 🔨 Build & Análise
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      
    - name: 🟢 Configurar Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'
        
    - name: 🚀 Início do processo de build
      run: |
        echo "🔨 Iniciando build do microserviço Estoque.io..."
        echo "📊 Informações do ambiente:"
        echo "  - Node.js: $(node --version)"
        echo "  - NPM: $(npm --version)"
        echo "  - Sistema: $(uname -a)"
      
    - name: 📦 Instalar dependências
      run: |
        cd ${{ env.WORKING_DIR }}
        echo "📥 Instalando dependências..."
        npm ci --prefer-offline --no-audit
        echo "✅ Dependências instaladas com sucesso!"
        
    - name: 🔍 Análise de segurança
      run: |
        cd ${{ env.WORKING_DIR }}
        echo "🔒 Executando auditoria de segurança..."
        npm audit --audit-level=moderate || echo "⚠️ Vulnerabilidades encontradas - revisar posteriormente"
        
    - name: 📊 Análise do projeto
      run: |
        cd ${{ env.WORKING_DIR }}
        echo "📋 Estrutura do projeto:"
        find . -type f -name "*.js" -o -name "*.json" | head -20
        echo ""
        echo "📄 Informações do package.json:"
        cat package.json | jq '.name, .version, .dependencies'
        echo ""
        echo "📈 Estatísticas do código:"
        echo "  - Arquivos JS: $(find . -name '*.js' | wc -l)"
        echo "  - Linhas de código: $(find . -name '*.js' -exec wc -l {} + | tail -1 | awk '{print $1}')"
        
    - name: 🧹 Verificação de qualidade
      run: |
        cd ${{ env.WORKING_DIR }}
        echo "🔍 Verificando qualidade do código..."
        # Verificar sintaxe JavaScript
        for file in $(find . -name '*.js'); do
          echo "Verificando: $file"
          node -c "$file" && echo "✅ $file - OK" || echo "❌ $file - ERRO"
        done
        
    - name: ✅ Build concluído
      run: echo "🎉 Build do microserviço Estoque.io finalizado com sucesso!"

  # Job de testes abrangentes
  test:
    name: 🧪 Testes Completos
    runs-on: ubuntu-latest
    needs: [validate, build]
    strategy:
      matrix:
        test-type: ['unit', 'integration', 'api']
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      
    - name: 🟢 Configurar Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'
        
    - name: 🧪 Início dos testes - ${{ matrix.test-type }}
      run: echo "🔬 Iniciando testes ${{ matrix.test-type }} do microserviço Estoque.io..."
      
    - name: 📦 Instalar dependências
      run: |
        cd ${{ env.WORKING_DIR }}
        npm ci --prefer-offline --no-audit
        
    - name: 🚀 Iniciar servidor para testes
      if: matrix.test-type != 'unit'
      run: |
        cd ${{ env.WORKING_DIR }}
        echo "🌐 Iniciando servidor na porta ${{ env.SERVICE_PORT }}..."
        node server.js &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        
        # Aguardar servidor inicializar
        echo "⏳ Aguardando servidor inicializar..."
        for i in {1..10}; do
          if curl -s http://localhost:${{ env.SERVICE_PORT }} > /dev/null; then
            echo "✅ Servidor iniciado com sucesso!"
            break
          fi
          echo "Tentativa $i/10..."
          sleep 2
        done
        
    - name: 🔍 Testes Unitários
      if: matrix.test-type == 'unit'
      run: |
        cd ${{ env.WORKING_DIR }}
        echo "🧪 Executando testes unitários..."
        
        # Teste de carregamento de dados
        echo "📊 Testando carregamento de dados..."
        node -e "
          try {
            const products = require('./data/products.js');
            console.log('✅ Dados carregados:', products.length, 'produtos');
            products.forEach(p => console.log('  -', p.name, '(ID:', p.id, ', Qty:', p.quantity, ')'));
            process.exit(0);
          } catch(e) {
            console.error('❌ Erro ao carregar dados:', e.message);
            process.exit(1);
          }
        "
        
        # Teste de sintaxe do servidor
        echo "🔍 Testando sintaxe do servidor..."
        node -c server.js && echo "✅ Sintaxe do servidor OK" || (echo "❌ Erro de sintaxe" && exit 1)
        
    - name: 🔍 Testes de Integração
      if: matrix.test-type == 'integration'
      run: |
        echo "🔗 Executando testes de integração..."
        
        # Teste de conectividade
        echo "📡 Testando conectividade do servidor..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ env.SERVICE_PORT }} || echo "000")
        if [ "$response" = "200" ] || [ "$response" = "404" ]; then
          echo "✅ SUCESSO: Servidor respondendo (HTTP $response)"
        else
          echo "❌ FALHA: Servidor não responde (HTTP $response)"
          exit 1
        fi
        
        # Teste de arquivos estáticos
        echo "📁 Testando servir arquivos estáticos..."
        static_response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ env.SERVICE_PORT }}/index.html || echo "000")
        if [ "$static_response" = "200" ]; then
          echo "✅ SUCESSO: Arquivos estáticos sendo servidos"
        else
          echo "⚠️ AVISO: Arquivos estáticos não encontrados (HTTP $static_response)"
        fi
        
    - name: 🔍 Testes de API
      if: matrix.test-type == 'api'
      run: |
        echo "🌐 Executando testes de API..."
        
        # Teste 1: Produto existente
        echo "📋 Teste 1: Consultando produto existente (ID: 101)..."
        response=$(curl -s "http://localhost:${{ env.SERVICE_PORT }}/inventory/check?productId=101")
        if echo "$response" | jq -e '.name' > /dev/null 2>&1; then
          echo "✅ SUCESSO: API retornou dados válidos"
          echo "📄 Resposta: $response" | jq .
        else
          echo "❌ FALHA: API não retornou dados esperados"
          echo "📄 Resposta: $response"
          exit 1
        fi
        
        # Teste 2: Produto inexistente
        echo "📋 Teste 2: Consultando produto inexistente (ID: 999)..."
        error_response=$(curl -s "http://localhost:${{ env.SERVICE_PORT }}/inventory/check?productId=999")
        if echo "$error_response" | jq -e '.error' > /dev/null 2>&1; then
          echo "✅ SUCESSO: API retornou erro apropriado"
          echo "📄 Resposta: $error_response" | jq .
        else
          echo "❌ FALHA: API não tratou produto inexistente corretamente"
          exit 1
        fi
        
        # Teste 3: Produto sem estoque
        echo "📋 Teste 3: Consultando produto sem estoque (ID: 102)..."
        stock_response=$(curl -s "http://localhost:${{ env.SERVICE_PORT }}/inventory/check?productId=102")
        if echo "$stock_response" | jq -e '.inStock == false' > /dev/null 2>&1; then
          echo "✅ SUCESSO: API identificou produto sem estoque corretamente"
          echo "📄 Resposta: $stock_response" | jq .
        else
          echo "❌ FALHA: API não identificou falta de estoque"
          exit 1
        fi
        
        # Teste 4: Performance
        echo "📋 Teste 4: Testando performance da API..."
        start_time=$(date +%s%N)
        for i in {1..5}; do
          curl -s "http://localhost:${{ env.SERVICE_PORT }}/inventory/check?productId=101" > /dev/null
        done
        end_time=$(date +%s%N)
        duration=$(( (end_time - start_time) / 1000000 ))
        echo "⏱️ 5 requisições executadas em ${duration}ms (média: $((duration/5))ms por requisição)"
        
    - name: 🧹 Limpeza
      if: always() && matrix.test-type != 'unit'
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          echo "🛑 Finalizando servidor (PID: $SERVER_PID)..."
          kill $SERVER_PID 2>/dev/null || true
        fi
        
    - name: 🎉 Testes ${{ matrix.test-type }} concluídos
      run: echo "🏆 Testes ${{ matrix.test-type }} do microserviço Estoque.io executados com sucesso!"

  # Job de relatório final
  report:
    name: 📊 Relatório Final
    runs-on: ubuntu-latest
    needs: [validate, build, test]
    if: always()
    
    steps:
    - name: 📊 Gerar relatório do pipeline
      run: |
        echo "📋 ===== RELATÓRIO FINAL DO PIPELINE ====="
        echo "🕐 Data/Hora: $(date)"
        echo "🔧 Commit: ${{ github.sha }}"
        echo "👤 Autor: ${{ github.actor }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo ""
        echo "📈 Status dos Jobs:"
        echo "  - Validação: ${{ needs.validate.result }}"
        echo "  - Build: ${{ needs.build.result }}"
        echo "  - Testes: ${{ needs.test.result }}"
        echo ""
        if [ "${{ needs.validate.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.test.result }}" = "success" ]; then
          echo "🎉 PIPELINE EXECUTADO COM SUCESSO! 🚀"
          echo "✅ Microserviço Estoque.io está pronto para produção!"
        else
          echo "⚠️ Pipeline concluído com problemas - revisar logs acima"
        fi
        echo "============================================"